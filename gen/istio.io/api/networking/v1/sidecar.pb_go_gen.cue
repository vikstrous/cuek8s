// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go istio.io/api/networking/v1

package v1

// `CaptureMode` describes how traffic to a listener is expected to be
// captured. Applicable only when the listener is bound to an IP.
#CaptureMode: int32 // #enumCaptureMode

#enumCaptureMode:
	#CaptureMode_DEFAULT |
	#CaptureMode_IPTABLES |
	#CaptureMode_NONE

#values_CaptureMode: {
	CaptureMode_DEFAULT:  #CaptureMode_DEFAULT
	CaptureMode_IPTABLES: #CaptureMode_IPTABLES
	CaptureMode_NONE:     #CaptureMode_NONE
}

// The default capture mode defined by the environment.
#CaptureMode_DEFAULT: #CaptureMode & 0

// Capture traffic using IPtables redirection.
#CaptureMode_IPTABLES: #CaptureMode & 1

// No traffic capture. When used in an egress listener, the application is
// expected to explicitly communicate with the listener port or Unix
// domain socket. When used in an ingress listener, care needs to be taken
// to ensure that the listener port is not in use by other processes on
// the host.
#CaptureMode_NONE: #CaptureMode & 2

#OutboundTrafficPolicy_Mode: int32 // #enumOutboundTrafficPolicy_Mode

#enumOutboundTrafficPolicy_Mode:
	#OutboundTrafficPolicy_REGISTRY_ONLY |
	#OutboundTrafficPolicy_ALLOW_ANY

#values_OutboundTrafficPolicy_Mode: {
	OutboundTrafficPolicy_REGISTRY_ONLY: #OutboundTrafficPolicy_REGISTRY_ONLY
	OutboundTrafficPolicy_ALLOW_ANY:     #OutboundTrafficPolicy_ALLOW_ANY
}

// Outbound traffic will be restricted to services defined in the
// service registry as well as those defined through `ServiceEntry` configurations.
#OutboundTrafficPolicy_REGISTRY_ONLY: #OutboundTrafficPolicy_Mode & 0

// Outbound traffic to unknown destinations will be allowed, in case
// there are no services or `ServiceEntry` configurations for the destination port.
#OutboundTrafficPolicy_ALLOW_ANY: #OutboundTrafficPolicy_Mode & 1

// `Sidecar` describes the configuration of the sidecar proxy that mediates
// inbound and outbound communication of the workload instance to which it is
// attached.
//
// <!-- crd generation tags
// +cue-gen:Sidecar:groupName:networking.istio.io
// +cue-gen:Sidecar:version:v1
// +cue-gen:Sidecar:annotations:helm.sh/resource-policy=keep
// +cue-gen:Sidecar:labels:app=istio-pilot,chart=istio,heritage=Tiller,release=istio
// +cue-gen:Sidecar:subresource:status
// +cue-gen:Sidecar:scope:Namespaced
// +cue-gen:Sidecar:resource:categories=istio-io,networking-istio-io
// +cue-gen:Sidecar:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=networking.istio.io/v1
// +genclient
// +k8s:deepcopy-gen=true
// -->
// <!-- istio code generation tags
// +istio.io/sync-from:networking/v1alpha3/sidecar.proto
// -->
#Sidecar: _

// `IstioIngressListener` specifies the properties of an inbound
// traffic listener on the sidecar proxy attached to a workload instance.
#IstioIngressListener: _

// `IstioEgressListener` specifies the properties of an outbound traffic
// listener on the sidecar proxy attached to a workload instance.
#IstioEgressListener: _

// `WorkloadSelector` specifies the criteria used to determine if the
// `Gateway`, `Sidecar`, `EnvoyFilter`, `ServiceEntry`, or `DestinationRule`
// configuration can be applied to a proxy. The matching criteria
// includes the metadata associated with a proxy, workload instance
// info such as labels attached to the pod/VM, or any other info that
// the proxy provides to Istio during the initial handshake. If
// multiple conditions are specified, all conditions need to match in
// order for the workload instance to be selected. Currently, only
// label based selection mechanism is supported.
#WorkloadSelector: _

// `OutboundTrafficPolicy` sets the default behavior of the sidecar for
// handling outbound traffic from the application.
// If your application uses one or more external
// services that are not known apriori, setting the policy to `ALLOW_ANY`
// will cause the sidecars to route any unknown traffic originating from
// the application to its requested destination.  Users are strongly
// encouraged to use `ServiceEntry` configurations to explicitly declare any external
// dependencies, instead of using `ALLOW_ANY`, so that traffic to these
// services can be monitored.
#OutboundTrafficPolicy: _

// Port describes the properties of a specific port of a service.
#SidecarPort: _
