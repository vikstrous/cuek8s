// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go istio.io/api/networking/v1

package v1

// `WorkloadGroup` enables specifying the properties of a single workload for bootstrap and
// provides a template for `WorkloadEntry`, similar to how `Deployment` specifies properties
// of workloads via `Pod` templates. A `WorkloadGroup` can have more than one `WorkloadEntry`.
// `WorkloadGroup` has no relationship to resources which control service registry like `ServiceEntry`
// and as such doesn't configure host name for these workloads.
//
// <!-- crd generation tags
// +cue-gen:WorkloadGroup:groupName:networking.istio.io
// +cue-gen:WorkloadGroup:version:v1
// +cue-gen:WorkloadGroup:labels:app=istio-pilot,chart=istio,heritage=Tiller,release=istio
// +cue-gen:WorkloadGroup:subresource:status
// +cue-gen:WorkloadGroup:scope:Namespaced
// +cue-gen:WorkloadGroup:resource:categories=istio-io,networking-istio-io,shortNames=wg,plural=workloadgroups
// +cue-gen:WorkloadGroup:printerColumn:name=Age,type=date,JSONPath=.metadata.creationTimestamp,description="CreationTimestamp is a timestamp
// representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations.
// Clients may not set this value. It is represented in RFC3339 form and is in UTC.
// Populated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata"
// +cue-gen:WorkloadGroup:preserveUnknownFields:false
// -->
//
// <!-- go code generation tags
// +kubetype-gen
// +kubetype-gen:groupVersion=networking.istio.io/v1
// +genclient
// +k8s:deepcopy-gen=true
// -->
// <!-- istio code generation tags
// +istio.io/sync-from:networking/v1alpha3/workload_group.proto
// -->
#WorkloadGroup: _

#ReadinessProbe: _

_#isReadinessProbe_HealthCheckMethod: _

#ReadinessProbe_HttpGet: {
	// `httpGet` is performed to a given endpoint
	// and the status/able to connect determines health.
	HttpGet?: null | #HTTPHealthCheckConfig @go(,*HTTPHealthCheckConfig) @protobuf(7,bytes,opt,name=http_get,json=httpGet,proto3,oneof)
}

#ReadinessProbe_TcpSocket: {
	// Health is determined by if the proxy is able to connect.
	TcpSocket?: null | #TCPHealthCheckConfig @go(,*TCPHealthCheckConfig) @protobuf(8,bytes,opt,name=tcp_socket,json=tcpSocket,proto3,oneof)
}

#ReadinessProbe_Exec: {
	// Health is determined by how the command that is executed exited.
	Exec?: null | #ExecHealthCheckConfig @go(,*ExecHealthCheckConfig) @protobuf(9,bytes,opt,name=exec,proto3,oneof)
}

#HTTPHealthCheckConfig: _

#HTTPHeader: _

#TCPHealthCheckConfig: _

#ExecHealthCheckConfig: _

// `ObjectMeta` describes metadata that will be attached to a `WorkloadEntry`.
// It is a subset of the supported Kubernetes metadata.
#WorkloadGroup_ObjectMeta: _
